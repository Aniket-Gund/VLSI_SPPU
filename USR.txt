library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity usr is
    Port ( pin : in STD_LOGIC_VECTOR (3 downto 0);
           sin : in STD_LOGIC;
           pout : out STD_LOGIC_VECTOR (3 downto 0);
           sout : out STD_LOGIC;
           mode : in STD_LOGIC_VECTOR (1 downto 0);
           load : in STD_LOGIC;
           clk : in STD_LOGIC;
           reset : in STD_LOGIC;
           clkoutput: out STD_LOGIC);
end usr;

architecture Behavioral of usr is
signal clkout:STD_LOGIC;
signal temp: STD_LOGIC_VECTOR(3 downto 0);
signal counter: integer range 0 to 49999999 :=0;
begin    
    process (clk,reset)
    begin
        if (reset = '1') then
            clkout<= '0';
            counter<= 0;
        elsif rising_edge(clk) then
            if (counter = 49999999) then
                clkout<= not clkout;
                counter<=0;
            else 
                counter<=counter+1;
            end if;
        end if;
        clkoutput<=clkout;
    end process;
    process (clkout,reset)
    begin
        if(reset = '1') then
            sout<='0';   
        elsif rising_edge(clkout) then
            case mode is 
                when "00" =>
                    sout<='0';
                    pout<=pin; --PIPO
                when "01" =>
                    pout <="0000";
                    temp(3) <=sin;
                    temp(2) <=temp(3);
                    temp(1) <=temp(2);
                    temp(0) <=temp(1);
                    sout<=temp(0);
                when "10" =>
                    if(load = '1') then
                        temp<= pin;
                    else
                        temp(2) <=temp(3);
                        temp(1) <=temp(2);
                        temp(0) <=temp(1);
                        sout <= temp(0);
                    end if;
                when others =>
                    if(load = '1') then
                        temp(3) <= sin;
                        temp(2) <=temp(3);
                        temp(1) <=temp(2);
                        temp(0) <=temp(1);
                    else
                        pout<=temp;
                    end if;
             end case;
         end if;
    end process;
end Behavioral;








Testbench:





----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 07/26/2019 11:10:41 AM
-- Design Name: 
-- Module Name: exp2_98_tb - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity exp2_98_tb is
--  Port ( );
end exp2_98_tb;

architecture Behavioral of exp2_98_tb is
component shiftreg
Port ( clk,rst,load,si : in STD_LOGIC;
           pi : in STD_LOGIC_VECTOR (3 downto 0);
           po : out STD_LOGIC_VECTOR (3 downto 0);
           mode:in STD_LOGIC_VECTOR (1 downto 0);
           so : out STD_LOGIC);
end component shiftreg;

signal clk,rst,load,si : STD_LOGIC;
signal  pi :STD_LOGIC_VECTOR (3 downto 0);
signal po :STD_LOGIC_VECTOR (3 downto 0);
signal mode:STD_LOGIC_VECTOR (1 downto 0);
signal so :STD_LOGIC;

constant clk_period: time:= 10 ns;
begin
uut: shiftreg port map (
     pi=>pi,
     si=>si,
     clk=>clk,
     rst=>rst,
     mode=>mode,
     load=>load,
     po=>po,
     so=>so);
     
 process
    begin
    clk<='0';
    wait for clk_period/2;
    clk<='1';
     wait for clk_period/2;
    end process;

    process
    begin
    rst<='1';
    wait for 10 ns;
    rst<='0';
    
    mode<="00";
    pi<="1001";
    wait for 10 ns;
    
    mode<="01";
    si<='1';
    wait for 10 ns;
    si<='0';
    wait for 10 ns;
    si<='1';
    wait for 10 ns;
    si<='0';
    wait for 50 ns;
    
    mode<="10";
    load<='1';
    pi<="1010";
    wait for 20 ns;
    load<='0';
    wait for 50 ns;
    
    mode<="11";
    load<='0';
    wait for 10 ns;
    si<='1';
    wait for 10 ns;
    si<='0';
    wait for 10 ns;
    si<='1';
    wait for 10 ns;
    si<='0';
    wait for 10 ns;
    load<='1';
    wait for 20 ns;
    end process;
end Behavioral;

